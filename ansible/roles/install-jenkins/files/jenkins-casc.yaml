credentials:
  system:
    domainCredentials:
      - credentials:
        - usernamePassword:
            description: "DEFAULT"
            id: "nexus-user"
            scope: GLOBAL
            username: "jenkins"
            password: "jenkins123"
        - string:
            description: "192.168.56.5:8081"
            id: "nexus-url"
            scope: GLOBAL
            secret: "192.168.56.5:8081"
        - string:
            description: "http://192.168.56.5:8081/repository/maven-central/"
            id: "nexus-mvn-central"
            scope: GLOBAL
            secret: "http://192.168.56.5:8081/repository/maven-central/"
        - string:
            description: "http://192.168.56.5:8081/repository/maven-releases/"
            id: "nexus-mvn-releases"
            scope: GLOBAL
            secret: "http://192.168.56.5:8081/repository/maven-releases/"
        - string:
            description: "http://192.168.56.5:8081/repository/maven-snapshots/"
            id: "nexus-mvn-snapshots"
            scope: GLOBAL
            secret: "http://192.168.56.5:8081/repository/maven-snapshots/"
        - string:
            description: "192.168.56.5:18444"
            id: "docker-releases"
            scope: GLOBAL
            secret: "192.168.56.5:18444"
        - string:
            description: "192.168.56.5:18443"
            id: "docker-snapshots"
            scope: GLOBAL
            secret: "192.168.56.5:18443"
        - usernamePassword:
            description: "DEFAULT"
            id: "agent-ssh-user"
            password: "vagrant" 
            scope: GLOBAL
            username: "vagrant"
jenkins:
  systemMessage: "Jenkins configured automatically by Jenkins Configuration as Code plugin\n\n"
  agentProtocols:
  - "JNLP4-connect"
  - "Ping"
  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  clouds:
  - docker:
      dockerApi:
        connectTimeout: 60
        dockerHost:
          uri: "tcp://192.168.56.3:2376"
        readTimeout: 60
      name: "docker-dynamic"
      templates:
      - connector:
          jnlp:
            jnlpLauncher:
              webSocket: true
              workDirSettings:
                disabled: false
                failIfWorkDirIsMissing: false
                internalDir: "remoting"
        dockerTemplateBase:
          cpuPeriod: 0
          cpuQuota: 0
          cpus: "2"
          image: "jenkins/inbound-agent:latest-jdk17"
          memoryLimit: 1024
          memorySwap: 5120
          mounts:
          - "type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock"
          mountsString: "type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock"
        instanceCapStr: "3"
        labelString: "docker-dynamic"
        mode: EXCLUSIVE
        name: "agent"
        pullTimeout: 300
        remoteFs: "/home/jenkins/agent" 
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false
  disableRememberMe: false
  labelAtoms:
  - name: "built-in"
  - name: "docker"
  - name: "vm"
  - name: "vm-docker"
  markupFormatter: "plainText"
  mode: NORMAL
  myViewsTabBar: "standard"
  nodes:
  - permanent:
      labelString: "vm docker"
      launcher:
        ssh:
          credentialsId: "agent-ssh-user"
          host: "192.168.56.3"
          port: 22
          sshHostKeyVerificationStrategy: "nonVerifyingKeyVerificationStrategy"
      name: "vm-docker"
      numExecutors: 2
      remoteFS: "./jenkins-agent"
      retentionStrategy: "always"
  numExecutors: 0
  slaveAgentPort: 50000
tool:
  git:
    installations:
    - home: "git"
      name: "Default"
  jdk:
    installations:
    - home: "/usr/lib/jvm/temurin-17-jdk-amd64"
      name: "temurin-17-jdk"
  maven:
    installations:
    - name: "maven-3.9.2"
      properties:
      - installSource:
          installers:
          - maven:
              id: "3.9.2"
  mavenGlobalConfig:
    globalSettingsProvider: "standard"
    settingsProvider: "standard"
unclassified:
  lockableResourcesManager:
    declaredResources:
      - name: "maven"
        description: "worker node local mvn repo p"
jobs:
  - script: >
      multibranchPipelineJob('Petclinic-PreCommit') {
        // dissable pipeline by defalut
        configure {
          it / disabled << 'true' // dissable pipeline by defalut
        }
        description('Job dissabled by default.\nEnable this job when Nexus configuration is finished. \n\n Configured in JCasC with JobDSL')
        branchSources {
          git {
            id('petclinic-100') // IMPORTANT use a constant and unique identifier
            remote('https://github.com/lipalipinski/spring-petclinic.git')
            includes('*')
          }
        }
        factory{
          remoteJenkinsFileWorkflowBranchProjectFactory{
            fallbackBranch("main")
            localMarker("")
            matchBranches(false)
            remoteJenkinsFile("Jenkinsfile-PreCommit")
            remoteJenkinsFileSCM{
              gitSCM{
                userRemoteConfigs{
                  userRemoteConfig{
                    name("") //Custom Repository Name or ID
                    url("https://github.com/lipalipinski/petclinic-ci.git") //URL for the repository
                    refspec("") // Branch spec
                    credentialsId("") // Credential ID. Leave blank if not required
                  }
                }
                branches{
                  branchSpec{
                    name("refs/heads/main")
                  }
                }
                browser{} // Leave blank for default Git Browser
                gitTool("") //Leave blank for default git executable
              }
            }
          }
        }
        triggers {
          periodicFolderTrigger{
            interval('5m')
          }
        }
      }
  - script: >
      multibranchPipelineJob('Petclinic-Build') {
        // dissable pipeline by defalut
        configure {
          it / disabled << 'true' // dissable pipeline by defalut
        }
        description('Job dissabled by default.\nEnable this job when Nexus configuration is finished. \n\n Configured in JCasC with JobDSL')
        branchSources {
          git {
            id('petclinic-200') // IMPORTANT use a constant and unique identifier
            remote('https://github.com/lipalipinski/spring-petclinic.git')
            includes('dev')
          }
        }
        factory{
          remoteJenkinsFileWorkflowBranchProjectFactory{
            fallbackBranch("main")
            localMarker("")
            matchBranches(false)
            remoteJenkinsFile("Jenkinsfile-Build")
            remoteJenkinsFileSCM{
              gitSCM{
                userRemoteConfigs{
                  userRemoteConfig{
                    name("") //Custom Repository Name or ID
                    url("https://github.com/lipalipinski/petclinic-ci.git") //URL for the repository
                    refspec("") // Branch spec
                    credentialsId("") // Credential ID. Leave blank if not required
                  }
                }
                branches{
                  branchSpec{
                    name("refs/heads/main")
                  }
                }
                browser{} // Leave blank for default Git Browser
                gitTool("") //Leave blank for default git executable
              }
            }
          }
        }
        triggers {
          periodicFolderTrigger{
            interval('5m')
          }
        }
      }
  - script: >
      pipelineJob('Petclinic-Promotion') {
        description('Configured in JCasC with JobDSL')
        parameters {
          string {
            name("VERSION")
            description("Artifact version (x.x.x-SNAPSHOT)")
            trim(true)
          }
          string {
            name("GROUP_ID")
            defaultValue("org.springframework.samples")
            trim(true)
          }
          string {
            name("APP_ID")
            defaultValue("spring-petclinic")
            trim(true)
          }
          string {
            name("REPO_NAME")
            defaultValue("maven-snapshots")
            trim(true)
          }
        }
        definition {
          cpsScm {
            lightweight(false)
            scm {
              gitSCM{
                userRemoteConfigs{
                  userRemoteConfig{
                    name("") //Custom Repository Name or ID
                    url("https://github.com/lipalipinski/petclinic-ci.git") //URL for the repository
                    refspec("refs/heads/main") // Branch spec
                    credentialsId("") // Credential ID. Leave blank if not required
                  }
                }
                branches{
                  branchSpec{
                    name("refs/heads/main")
                  }
                }
                browser{} // Leave blank for default Git Browser
                gitTool("") //Leave blank for default git executable
              }
            }
            scriptPath("Jenkinsfile-Promotion")
          }
        }
      }
  - script: >
      pipelineJob('Petclinic-Deploy') {
        description('Configured in JCasC with JobDSL')
        parameters {
          string {
            name("VERSION")
            description("Artifact version (x.x.x)")
            trim(true)
          }
          string {
            name("GROUP_ID")
            defaultValue("org.springframework.samples")
            trim(true)
          }
          string {
            name("APP_ID")
            defaultValue("spring-petclinic")
            trim(true)
          }
          string {
            name("REPO_NAME")
            defaultValue("maven-snapshots")
            trim(true)
          }
        }
        definition {
          cpsScm {
            lightweight(false)
            scm {
              gitSCM{
                userRemoteConfigs{
                  userRemoteConfig{
                    name("") //Custom Repository Name or ID
                    url("https://github.com/lipalipinski/petclinic-ci.git") //URL for the repository
                    refspec("refs/heads/main") // Branch spec
                    credentialsId("") // Credential ID. Leave blank if not required
                  }
                }
                branches{
                  branchSpec{
                    name("refs/heads/main")
                  }
                }
                browser{} // Leave blank for default Git Browser
                gitTool("") //Leave blank for default git executable
              }
            }
            scriptPath("Jenkinsfile-Deploy")
          }
        }
      }